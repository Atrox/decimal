package math

import (
	"math/big"

	"github.com/ericlagergren/decimal"
	"github.com/ericlagergren/decimal/internal/arith/pow"
	"github.com/ericlagergren/decimal/internal/c"
)

const _log10 = "2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404228624863340952546508280675666628736909878168948290720832555468084379989482623319852839350530896537773262884616336622228769821988674654366747440424327436515504893431493939147961940440022210510171417480036880840126470806855677432162283552201148046637156591213734507478569476834636167921018064450706480002775026849167465505868569356734206705811364292245544057589257242082413146956890167589402567763113569192920333765871416602301057030896345720754403708474699401682692828084811842893148485249486448719278096762712757753970276686059524967166741834857044225071979650047149510504922147765676369386629769795221107182645497347726624257094293225827985025855097852653832076067263171643095059950878075237103331011978575473315414218084275438635917781170543098274823850456480190956102992918243182375253577097505395651876975103749708886921802051893395072385392051446341972652872869651108625714921988499787488737713456862091670584980782805975119385444500997813114691593466624107184669231010759843831919129223079250374729865092900988039194170265441681633572755570315159611356484654619089704281976336583698371632898217440736600916217785054177927636773114504178213766011101073104239783252189489881759792179866639431952393685591644711824675324563091252877833096360426298215304087456092776072664135478757661626292656829870495795491395491804920906943858079003276301794150311786686209240853794986126493347935487173745167580953708828106745244010589244497647968607512027572418187498939597164310551884819528833074669931781463493000032120032776565413047262188397059679445794346834321839530441484480370130575367426215367557981477045803141363779323629156012818533649846694226146520645994207291711937060244492935803700771898109736253322454836698850552828596619280509844717519850366668087497049698227322024482334309716911113681358841869654932371499694197968780300885040897961859875657989483644521204369821641529298781174297333258860791591251096718751092924847502393057266544627620092306879151813580347770129559364629841236649702335517458619556477246185771736936840467657704787431978057385327181093388349633881306994556939934610109074561603331224794936045536184912333306370475172487127637914092439833181016473782337969226563768207170693584639453161694941170184193811940541644946611127471281970581778329384174223140993002291150236219218672333726838568827353337192510341293070563254442661142976538830182238409102619858288843358745596045300454837078905257847316628370195339223104752756499811922874278971371571322831964100342212421008218067952527668985818095611920839176072108091992346151695259909947378278064812805879273199389345341532018596971102140754228279629823706894176474064222575721245539252617937365243444056059533659153916031252448014931323457245387952438903683923645050788173135971123814532370150841349112232439092768172474960795579915136398288105828574053800065337165555301419633224191808762101820491949265148389269229370789863527063850270226975512499430043818278847319921965814312197607111087634122446640737794555885839194408093110242830850847463190693219814686430835553476511146507690973333958325750682775828310518032994813084839968172113667988019203777068685479506203584172199843743941063623432314811745524756400891921654912690827815060481711990701886292098228627167304771990157702853579105062846733722324000187956150228908439674146856564831768813892068409579691803354339136467865745905494880298543819880735955427041540873401453173925453673281939976456025598432433056158735002932802572306453270348118108472311644680475191942641443755486576939292968342866758510673192419182285226899138931192169442423038517065293370451214983835979402182716291336402531549596913117146635344222645685446832262892531985273994666695718601579298385044015374615282751288575456175419699767890892117249023763478789424021833767813973546583455562950793090466805159764095052481894758730994766129863206773565311117860615374810108158642772111135001766610911496964941830769463013884160265031784811929723802068086896236543965915120676079050083195230243478178830387784710282630559124306243943156911946172332151304783208942585130526425182114798482584247309670795016443955200631371142485002497652901513103802164168434680366239650400578520317274646341488894127703883187606669041729659713599081773690063478945952889762219978807982713983318153955415729789470167287502532359082781316357066634895676366344001130098009387835921300262953071236743022323997073379866841517182468881456576477211751163677973275051830749026653624"

func log10(prec int) *decimal.Big {
	if prec < len(_log10) {
		x, _ := new(decimal.Big).SetString(_log10[:prec])
		return x
	}
	// TODO(eric): log10 function
	x, _ := new(decimal.Big).SetString(_log10)
	return x
}

var (
	neg       = decimal.New(-1, 0)
	negfour   = decimal.New(-4, 0)
	one       = decimal.New(1, 0)
	two       = decimal.New(2, 0)
	six       = decimal.New(6, 0)
	eight     = decimal.New(8, 0)
	sixteen   = decimal.New(16, 0)
	thirtyTwo = decimal.New(32, 0)
)

// alias returns a if a != b, otherwise it returns a newly-allocated Big. It
// should be used if a *might* be able to be used for storage, but only if it
// doesn't alias b. The returned Big will have a's Context.
func alias(a, b *decimal.Big) *decimal.Big {
	if a != b {
		return a
	}
	return decimal.WithContext(a.Context)
}

func precision(z *decimal.Big) (p int) {
	p = z.Context.Precision
	if p > 0 && p <= decimal.UnlimitedPrecision {
		return p
	}
	if p == 0 {
		z.Context.Precision = decimal.DefaultPrecision
	} else {
		z.Context.Conditions |= decimal.InvalidContext
	}
	return decimal.DefaultPrecision
}

func etiny(z *decimal.Big) int { return decimal.MinScale - (precision(z) - 1) }

func min(x, y int) int {
	if x < y {
		return x
	}
	return y
}

func firstDigit(x *decimal.Big) uint64 {
	xp := x.Precision()
	t, m := decimal.Raw(x)
	if t != c.Inflated {
		p, _ := pow.Ten(uint64(xp - 1))
		return t / p
	}
	return new(big.Int).Quo(m, pow.BigTen(uint64(xp))).Uint64()
}
