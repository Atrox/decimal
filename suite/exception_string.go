// Code generated by "stringer -type=Exception,Op"; DO NOT EDIT

package suite

import "fmt"

const (
	_Exception_name_0 = "None"
	_Exception_name_1 = "Inexact"
	_Exception_name_2 = "Underflow"
	_Exception_name_3 = "Overflow"
	_Exception_name_4 = "DivByZero"
	_Exception_name_5 = "Invalid"
)

var (
	_Exception_index_0 = [...]uint8{0, 4}
	_Exception_index_1 = [...]uint8{0, 7}
	_Exception_index_2 = [...]uint8{0, 9}
	_Exception_index_3 = [...]uint8{0, 8}
	_Exception_index_4 = [...]uint8{0, 9}
	_Exception_index_5 = [...]uint8{0, 7}
)

func (i Exception) String() string {
	switch {
	case i == 0:
		return _Exception_name_0
	case i == 2:
		return _Exception_name_1
	case i == 4:
		return _Exception_name_2
	case i == 8:
		return _Exception_name_3
	case i == 16:
		return _Exception_name_4
	case i == 32:
		return _Exception_name_5
	default:
		return fmt.Sprintf("Exception(%d)", i)
	}
}

const _Op_name = "AddSubMulDivFMASqrtRemRFICFFCFICIFCFDCDFQuietCmpSigCmpCopyNegAbsCopySignScalbLogbNextAfterClassIsSignedIsNormalIsInfIsZeroIsSubNormalIsNaNIsSignalingIsFiniteMinNumMaxNumMinNumMagMaxNumMagSameQuantumQuantizeNextUpNextDownEquiv"

var _Op_index = [...]uint8{0, 3, 6, 9, 12, 15, 19, 22, 25, 28, 31, 34, 37, 40, 48, 54, 58, 61, 64, 72, 77, 81, 90, 95, 103, 111, 116, 122, 133, 138, 149, 157, 163, 169, 178, 187, 198, 206, 212, 220, 225}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return fmt.Sprintf("Op(%d)", i)
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
